<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[hexo一些常见的使用方法]]></title>
      <url>%2F2017%2F03%2F02%2Fhexo%E4%B8%80%E4%BA%9B%E5%B8%B8%E8%A7%81%E7%9A%84%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95%2F</url>
      <content type="text"><![CDATA[以下的内容大都引用自hexo的官方文档，只是按自己的习惯作了一些摘取和整理。 常用配置网站 参数 描述 title 网站标题 subtitle 网站副标题 description 网站描述 author 名字 language 网站使用的语言 timezone 网站时区。Hexo默认使用电脑的时区。具体时区列表可以参考时区列表 网址 参数 描述 默认值 url 网址 root 网站根目录 permalink 文章的永久链接格式 :year/:month/:day/:title/ permalink_defaults 永久链接中各部分的默认值 &nbsp; 网站存放在子目录如果网站存放在子目录中，例如 http://yoursite.com/blog，则 url 设为 http://yoursite.com/blog 并把 root 设为 /blog/。 目录 参数 描述 默认值 source_dir 资源文件夹，这个文件夹用来存放内容。 source public_dir 公共文件夹，这个文件夹用于存放生成的站点文件。 public tag_dir 标签文件夹 tags archive_dir 归档文件夹 archives category_dir 分类文件夹 categories code_dir Include code 文件夹 downloads/code i18n_dir 国际化（i18n）文件夹 :lang skip_render 跳过指定文件的渲染，您可使用 glob 表达式来匹配路径。 &nbsp; 文章 参数 描述 默认值 new_post_name 新文章的文件名称 :title.md default_layout 预设布局 post auto_spacing 在中文和英文之间加入空格 false titlecase 把标题转换为 title case false external_link 在新标签中打开链接 true filename_case 把文件名称转换为 (1) 小写或 (2) 大写 0 render_drafts 显示草稿 false post_asset_folder 启动 Asset 文件夹 false relative_link 把链接改为与根目录的相对位址 false future 显示未来的文章 true highlight 代码块的设置 &nbsp; 分类 &amp; 标签 参数 描述 默认值 default_category 默认分类 uncategorized category_map 分类别名 &nbsp; tag_map 标签别名 &nbsp; 日期 / 时间格式Hexo 使用 Moment.js 来解析和显示时间。 参数 描述 默认值 date_format 日期格式 YYYY-MM-DD time_format 时间格式 HH:mm:ss 分页 参数 描述 默认值 per_page 每页显示的文章量 (0 = 关闭分页功能) 10 pagination_dir 分页目录 page 扩展 参数 描述 theme 当前主题名称。值为false时禁用主题 deploy 部署部分的设置 指令init1$ hexo init [fold] 新建一个网站。如果没有设置folder，Hexo 默认在目前的文件夹建立网站。 new1$ hexo new [layout] &lt;title&gt; 新建一篇文章。如果没有设置layout的话，默认使用_config.yml中的default_layout参数代替。如果标题包含空格的话，请使用引号括起来。 generate12$ hexo generate$ hexo g 生成静态文件。 -d, –deploy 文件生成后立即部署网站 -w, –watch 监视文件变动 publish1$ hexo publish [layout] &lt;filename&gt; 发表草稿。 server1$ hexo server 启动服务器。默认情况下，访问网址为： http://localhost:4000/。 -p, –port 重设端口 -i, –ip 重设ip -s, –static 只使用静态文件 -l, –log 启动日记记录，使用覆盖记录格式 deploy12$ hexo deploy$ hexo d 部署网站。 -g, –generate 部署之前预先生成静态文件 render1$ hexo render &lt;file1&gt; [file2] ... 渲染文件。 -o, –output 设置输出路径 migrate1$ hexo migrate &lt;type&gt; 从其他博客系统迁移内容。 clean1$ hexo clean 清除缓存文件(db.json)和已生成的静态文件(public)。在某些情况（尤其是更换主题后），如果发现对站点的更改无论如何也不生效，可能需要运行该命令。 写作1$ hexo new [layout] &lt;title&gt; 可以在命令中指定文章的布局（layout），默认为post，可以通过修改_config.yml中的default_layout参数来指定默认布局。 布局（Layout）Hexo 有三种默认布局：post、page 和 draft，它们分别对应不同的路径，而您自定义的其他布局和 post 相同，都将储存到 source/_posts 文件夹。 布局 路径 post source/_posts page source draft source/_drafts *如果不想文章被处理，可以将 Front-Matter 中的layout: 设为 false 。 文件名称Hexo 默认以标题做为文件名称，但可以编辑 new_post_name 参数来改变默认的文件名称，举例来说，设为 :year-:month-:day-:title.md 可以更方便的通过日期来管理文章。 变量 描述 :title 标题（小写，空格将会被替换为短杠） :year 建立的年份，比如， 2015 :month 建立的月份（有前导零），比如， 04 :i_month 建立的月份（无前导零），比如， 4 :day 建立的日期（有前导零），比如， 07 :i_day 建立的日期（无前导零），比如， 7 草稿草稿(draft)是 Hexo 的一种特殊部局。这种布局在建立时会被保存到 $source_dir/_drafts 文件夹，可以通过 publish 命令将草稿移动到 $source_dir/_posts 文件夹，该命令的使用方式与 new 十分类似，也可以在命令中指定 layout 来指定布局。1$ hexo publish [layout] &lt;title&gt;草稿默认不会显示在页面中，可以在执行时加上 –draft 参数，或是把 render_drafts 参数设为 true 来预览草稿。 模版（Scaffold）在新建文章时，Hexo 会根据 scaffolds 文件夹内相对应的文件来建立文件，例如：1$ hexo new photo &quot;My Gallery&quot;在执行这行指令时，Hexo 会尝试在 scaffolds 文件夹中寻找 photo.md，并根据其内容建立文章，以下是可以在模版中使用的变量： layout 布局 title 标题 date 文件建立日期 Front-MatterFront-matter 是文件最上方以 — 分隔的区域，用于指定个别文件的变量以下是预先定义的参数，可在模板中使用这些参数值并加以利用。 参数 描述 默认值 layout 布局 &nbsp; title 标题 &nbsp; date 建立日期 文件建立日期 updated 更新日期 文件更新日期 comments 开启文章的评论功能 true tags 标签（不适用于分页） &nbsp; categories 分类（不适用于分页） &nbsp; permalink 覆盖文章网址 &nbsp; 标签插件引用块说明：在文章中插入引言，可包含作者、来源和标题。别号：quote语法：123&#123;% blockquote [author[, source]] [link] [source_link_title] %&#125;content&#123;% endblockquote %&#125; 普通的 blockquote没有提供参数123&#123;% blockquote %&#125;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque hendrerit lacus ut purus iaculis feugiat. Sed nec tempor elit, quis aliquam neque. Curabitur sed diam eget dolor fermentum semper at eu lorem.&#123;% endblockquote %&#125; Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque hendrerit lacus ut purus iaculis feugiat. Sed nec tempor elit, quis aliquam neque. Curabitur sed diam eget dolor fermentum semper at eu lorem. 引用书上的句子123&#123;% blockquote David Levithan, Wide Awake %&#125;Do not just seek happiness for yourself. Seek happiness for all. Through kindness. Through mercy.&#123;% endblockquote %&#125; Do not just seek happiness for yourself. Seek happiness for all. Through kindness. Through mercy. David LevithanWide Awake 引用Twitter123&#123;% blockquote @DevDocs https://twitter.com/devdocs/status/356095192085962752 %&#125;NEW: DevDocs now comes with syntax highlighting. http://devdocs.io&#123;% endblockquote %&#125; NEW: DevDocs now comes with syntax highlighting. http://devdocs.io @DevDocstwitter.com/devdocs/status/356095192085962752 引用网络上的文章123&#123;% blockquote Seth Godin http://sethgodin.typepad.com/seths_blog/2009/07/welcome-to-island-marketing.html Welcome to Island Marketing %&#125;Every interaction is both precious and an opportunity to delight.&#123;% endblockquote %&#125; Every interaction is both precious and an opportunity to delight. Seth GodinWelcome to Island Marketing 代码块说明：在文章中插入代码。别名： code语法：123&#123;% codeblock [title] [lang:language] [url] [link text] %&#125;code snippet&#123;% endcodeblock %&#125; 普通代码块123&#123;% codeblock %&#125;alert(&apos;Hello World!&apos;);&#123;% endcodeblock %&#125; 1alert(&apos;Hello World!&apos;); 指定语言123&#123;% codeblock lang:objc %&#125;[rectangle setX: 10 y: 10 width: 20 height: 20];&#123;% endcodeblock %&#125; 1[rectangle setX: 10 y: 10 width: 20 height: 20]; 附加说明123&#123;% codeblock Array.map lang:javascript %&#125;array.map(callback[, thisArg])&#123;% endcodeblock %&#125; Array.map1array.map(callback[, thisArg]) 附加网址和说明1234&#123;% codeblock _.compact http://underscorejs.org/#compact Underscore.js lang:javascript %&#125;_.compact([0, 1, false, 2, &apos;&apos;, 3]);//=&gt; [1, 2, 3]&#123;% endcodeblock %&#125; _.compactUnderscore.js12_.compact([0, 1, false, 2, '', 3]);//=&gt; [1, 2, 3] 反引号代码块另一种形式的代码块，不同的是它使用三个反引号来包裹。123```[language] [title] [url] [link text]code snippet``` jsFiddle在文章中嵌入 jsFiddle。1&#123;% jsfiddle shorttag [tabs] [skin] [width] [height] %&#125; Gist在文章中嵌入 Gist。1&#123;% gist gist_id [filename] %&#125; iframe在文章中插入 iframe。1&#123;% iframe url [width] [height] %&#125; Image在文章中插入指定大小的图片。1&#123;% img [class names] /path/to/image [width] [height] [title text [alt text]] %&#125; Link在文章中插入链接，并自动给外部链接添加 target=”_blank” 属性。1&#123;% link text url [external] [title] %&#125; Include Code插入 source 文件夹内的代码文件。1&#123;% include_code [title] [lang:language] path/to/file %&#125; Youtube在文章中插入 Youtube 视频。1&#123;% youtube video_id %&#125; Vimeo在文章中插入 Vimeo 视频。1&#123;% vimeo video_id %&#125; 引用文章引用其他文章的链接。12&#123;% post_path slug %&#125;&#123;% post_link slug [title] %&#125; 引用资源引用文章的资源。123&#123;% asset_path slug %&#125;&#123;% asset_img slug [title] %&#125;&#123;% asset_link slug [title] %&#125; Raw如果您想在文章中插入 Swig 标签，可以尝试使用 Raw 标签，以免发生解析异常。123&#123;% raw %&#125;content&#123;% endraw %&#125; 变量全局变量 变量 描述 site 网站变量 page 针对该页面的内容以及 front-matter 所设定的变量。 config 网站配置 theme 主题配置。继承自网站配置。 _ (单下划线) Lodash 函数库 path 当前页面的路径（不含根路径） url 当前页面的完整网址 env 环境变量 网站变量 变量 描述 site.posts 所有文章 site.pages 所有分页 site.categories 所有分类 site.tags 所有标签 页面(page) 变量 描述 page.title 页面标题 page.date 页面建立日期（Moment.js 对象） page.updated 页面更新日期（Moment.js 对象） page.comments 留言是否开启 page.layout 布局名称 page.content 页面的完整内容 page.excerpt 页面摘要 page.more 除了页面摘要的其余内容 page.source 页面原始路径 page.full_source 页面的完整原始路径 page.path 页面网址（不含根路径）。我们通常在主题中使用 url_for(page.path)。 page.permalink 页面的完整网址 page.prev 上一个页面。如果此为第一个页面则为 null。 page.next 下一个页面。如果此为最后一个页面则为 null。 page.raw 文章的原始内容 page.photos 文章的照片（用于相簿） page.link 文章的外部链接（用于链接文章） 文章 (post)和 page 布局类似，但是添加了下列变量。 变量 描述 page.published 如果该文章已发布则为True page.categories 该文章的所有分类 page.tags 该文章的所有标签 首页（index） 变量 描述 page.per_page 每页显示的文章数量 page.total 总文章数 page.current 目前页数 page.current_url 目前分页的网址 page.posts 本页文章 page.prev 上一页的页数。如果此页是第一页的话则为 0。 page.prev_link 上一页的网址。如果此页是第一页的话则为 ‘’。 page.next 下一页的页数。如果此页是最后一页的话则为 0。 page.next_link 下一页的网址。如果此页是最后一页的话则为 ‘’。 page.path 当前页面的路径（不含根目录）。我们通常在主题中使用 url_for(page.path)。 归档 (archive)与 index 布局相同，但新增以下变量。 变量 描述 page.archive 等于 true page.year 年份归档 (4位) page.month 月份归档 (没有前导零的2位数) 分类 (category)与 index 布局相同，但新增以下变量。 变量 描述 page.category 分类名称 标签 (tag)与 index 布局相同，但新增以下变量。 变量 描述 page.tag 标签名称 辅助函数辅助函数帮助在模版中快速插入内容。辅助函数不能在源文件中使用。 网址url_for在路径前加上根路径，从 Hexo 2.7 开始您应该使用此函数而不是 config.root + path。1&lt;%- url_for(path) %&gt; relative_url取得与 from 相对的 to 路径。1&lt;%- relative_url(from, to) %&gt; gravatar插入 Gravatar 图片。如果不指定 options 参数，将会应用默认参数。否则，你可以将其设置为一个数字，这个数字将会作为 Gravatar 的大小参数。最后，如果你设置它一个对象，它将会被转换为 Gravatar 的一个查询字符串参数。1&lt;%- gravatar(email, [options]) %&gt;; 示例：123456&lt;%- gravatar('a@abc.com') %&gt;// http://www.gravatar.com/avatar/b9b00e66c6b8a70f88c73cb6bdb06787&lt;%- gravatar('a@abc.com', 40) %&gt;// http://www.gravatar.com/avatar/b9b00e66c6b8a70f88c73cb6bdb06787?s=40&lt;%- gravatar('a@abc.com' &#123;s: 40, d: 'http://example.com/image.png'&#125;) %&gt;// http://www.gravatar.com/avatar/b9b00e66c6b8a70f88c73cb6bdb06787?s=40&amp;d=http%3A%2F%2Fexample.com%2Fimage.png HTML 标签css载入 CSS 文件。path 可以是数组或字符串，如果 path 开头不是 / 或任何协议，则会自动加上根路径；如果后面没有加上 .css 扩展名的话，也会自动加上。1&lt;%- css(path, ...) %&gt; 示例：12345&lt;%- css('style.css') %&gt;// &lt;link rel="stylesheet" href="/style.css" type="text/css"&gt;&lt;%- css(['style.css', 'screen.css']) %&gt;// &lt;link rel="stylesheet" href="/style.css" type="text/css"&gt;// &lt;link rel="stylesheet" href="/screen.css" type="text/css"&gt; js载入 JavaScript 文件。path 可以是数组或字符串，如果 path 开头不是 / 或任何协议，则会自动加上根路径；如果后面没有加上 .js 扩展名的话，也会自动加上。1&lt;%- js(path, ...) %&gt; 示例：12345&lt;%- js('script.js') %&gt;// &lt;script type="text/javascript" src="/script.js"&gt;&lt;/script&gt;&lt;%- js(['script.js', 'gallery.js']) %&gt;// &lt;script type="text/javascript" src="/script.js"&gt;&lt;/script&gt;// &lt;script type="text/javascript" src="/gallery.js"&gt;&lt;/script&gt; link_to插入链接。1&lt;%- link_to(path, [text], [options]) %&gt; 参数 描述 默认值 external 在新视窗打开链接 false class Class 名称 &nbsp; id ID &nbsp; 示例：123456&lt;%- link_to('http://www.google.com') %&gt;// &lt;a href="http://www.google.com" title="http://www.google.com"&gt;http://www.google.com&lt;/a&gt;&lt;%- link_to('http://www.google.com', 'Google') %&gt;// &lt;a href="http://www.google.com" title="Google"&gt;Google&lt;/a&gt;&lt;%- link_to('http://www.google.com', 'Google', &#123;external: true&#125;) %&gt;// &lt;a href="http://www.google.com" title="Google" target="_blank" rel="external"&gt;Google&lt;/a&gt; mail_to插入电子邮箱链接。1&lt;%- mail_to(path, [text], [options]) %&gt; 参数 描述 class Class 名称 id ID subject 邮件主题 cc 抄送（CC） bcc 密送（BCC） body 邮件内容 示例：1234&lt;%- mail_to('a@abc.com') %&gt;// &lt;a href="mailto:a@abc.com" title="a@abc.com"&gt;a@abc.com&lt;/a&gt;&lt;%- mail_to('a@abc.com', 'Email') %&gt;// &lt;a href="mailto:a@abc.com" title="Email"&gt;Email&lt;/a&gt; image_tag插入图片。1&lt;%- image_tag(path, [options]) %&gt; 参数 描述 alt 图片的替代文字 class Class 名称 id ID width 图片宽度 height 图片高度 favicon_tag插入 favicon。1&lt;%- favicon_tag(path) %&gt; feed_tag插入 feed 链接。1&lt;%- feed_tag(path, [options]) %&gt; 参数 描述 默认值 title Feed 标题 type Feed 类型 atom 条件函数is_current检查 path 是否符合目前页面的网址。开启 strict 选项启用严格比对。1&lt;%- is_current(path, [strict]) %&gt; is_home检查目前是否为首页。1&lt;%- is_home() %&gt; is_post检查目前是否为文章。1&lt;%- is_post() %&gt; is_archive检查目前是否为存档页面。1&lt;%- is_archive() %&gt; is_year检查目前是否为年度归档页面。1&lt;%- is_year() %&gt; is_month检查目前是否为月度归档页面。1&lt;%- is_month() %&gt; is_category检查目前是否为分类归档页面。如果给定一个字符串作为参数，将会检查目前是否为指定分类。12&lt;%- is_category() %&gt;&lt;%- is_category('hobby') %&gt; is_tag检查目前是否为标签归档页面。如果给定一个字符串作为参数，将会检查目前是否为指定标签。12&lt;%- is_tag() %&gt;&lt;%- is_tag('hobby') %&gt; 字符串处理trim清除字符串开头和结尾的空格。1&lt;%- trim(string) %&gt; strip_html清除字符串中的 HTML 标签。1&lt;%- strip_html(string) %&gt; 示例：12&lt;%- strip_html('It's not &lt;b&gt;important&lt;/b&gt; anymore!') %&gt;// It's not important anymore! titlecase把字符串转换为正确的 Title case。1&lt;%- titlecase(string) %&gt; 示例：12&lt;%- titlecase('this is an apple') %&gt;# This is an Apple markdown使用 Markdown 解析字符串。1&lt;%- markdown(str) %&gt; 示例：12&lt;%- markdown('make me **strong**') %&gt;// make me &lt;strong&gt;strong&lt;/strong&gt; render解析字符串。1&lt;%- render(str, engine, [options]) %&gt; word_wrap使每行的字符串长度不超过 length。length 预设为 80。1&lt;%- word_wrap(str, [length]) %&gt; 示例：12&lt;%- word_wrap('Once upon a time', 8) %&gt;// Once upon\n a time truncate移除超过 length 长度的字符串。1&lt;%- truncate(text, length) %&gt; 示例：123456&lt;%- truncate('Once upon a time in a world far far away', &#123;length: 17&#125;) %&gt;// Once upon a ti...&lt;%- truncate('Once upon a time in a world far far away', &#123;length: 17, separator: ' '&#125;) %&gt;// Once upon a...&lt;%- truncate('And they found that many people were sleeping better.', &#123;length: 25, omission: '... (continued)'&#125;) %&gt;// And they f... (continued) 模板partial载入其他模板文件，可在 locals 设定区域变量。1&lt;%- partial(layout, [locals], [options]) %&gt; 参数 描述 默认值 cache 缓存（使用 Fragment cache） false only 限制局部变量。在模板中只能使用 locals 中设定的变量。 false fragment_cache局部缓存。它储存局部内容，下次使用时就能直接使用缓存。1&lt;%- fragment_cache(id, fn); 示例：123&lt;%- fragment_cache('header', function()&#123; return '&lt;header&gt;&lt;/header&gt;';&#125;) %&gt; 日期与时间date插入格式化的日期。date 可以是 UNIX 时间、ISO 字符串、Date 对象或 Moment.js 对象。format 默认为 date_format 配置信息。1&lt;%- date(date, [format]) %&gt; 示例：1234&lt;%- date(Date.now()) %&gt;// 2013-01-01&lt;%- date(Date.now(), 'YYYY/M/D') %&gt;// Jan 1 2013 date_xml插入 XML 格式的日期。date 可以是 UNIX 时间、ISO 字符串、Date 对象或 Moment.js 对象。1&lt;%- date_xml(date) %&gt; 示例：12&lt;%- date_xml(Date.now()) %&gt;// 2013-01-01T00:00:00.000Z time插入格式化的时间。date 可以是 UNIX 时间、ISO 字符串、Date 对象或 Moment.js 对象。format 默认为 time_format 配置信息。1&lt;%- time(date, [format]) %&gt; 示例：1234&lt;%- time(Date.now()) %&gt;// 13:05:12&lt;%- time(Date.now(), 'h:mm:ss a') %&gt;// 1:05:12 pm full_date插入格式化的日期和时间。date 可以是 UNIX 时间、ISO 字符串、Date 对象或 Moment.js 对象。format 默认为 date_format + time_format。1&lt;%- full_date(date, [format]) %&gt; 示例：1234&lt;%- full_date(new Date()) %&gt;// Jan 1, 2013 0:00:00&lt;%- full_date(new Date(), 'dddd, MMMM Do YYYY, h:mm:ss a') %&gt;// Tuesday, January 1st 2013, 12:00:00 am momentMoment.js 函数库。 列表list_categories插入分类列表。1&lt;%- list_categories([options]) %&gt; 参数 描述 默认值 orderby 分类排列方式 name order 分类排列顺序。1, asc 升序；-1, desc 降序。 1 show_count 显示每个分类的文章总数 true style 分类列表的显示方式。使用 list 以无序列表（unordered list）方式显示。 list separator 分类间的分隔符号。只有在 style 不是 list 时有用。 , depth 要显示的分类层级。0 显示所有层级的分类；-1 和 0 很类似，但是显示不分层级；1 只显示第一层的分类。 0 class 分类列表的 class 名称。 category transform 改变分类名称显示方法的函数 &nbsp; list_tags插入标签列表。1&lt;%- list_tags([options]) %&gt; 选项 描述 预设值 orderby 标签排列方式 name order 标签排列顺序。1, asc 升序；-1, desc 降序。 1 show_count 显示每个标签的文章总数 true style 标签列表的显示方式。使用 list 以无序列表（unordered list）方式显示。 list separator 标签间的分隔符号。只有在 style 不是 list 时有用。 , class 标签列表的 class 名称。 tag transform 改变标签名称显示方法的函数 &nbsp; amount 要显示的标签数量（0 = 无限制） 0 list_archives插入归档列表。1&lt;%- list_archives([options]) %&gt; 参数 描述 默认值 type 类型。此设定可为 yearly 或 monthly。 monthly order 排列顺序。1, asc 升序；-1, desc 降序。 1 show_count 显示每个归档的文章总数 true format 日期格式 MMMM YYYY style 归档列表的显示方式。使用 list 以无序列表（unordered list）方式显示。 list separator 归档间的分隔符号。只有在 style 不是 list 时有用。 , class 归档列表的 class 名称。 archive transform 改变归档名称显示方法的函数 &nbsp; list_posts插入文章列表。1&lt;%- list_posts([options]) %&gt; 参数 描述 默认值 orderby 文章排列方式 date order 文章排列顺序。1, asc 升序；-1, desc 降序。 -1 style 文章列表的显示方式。使用 list 以无序列表（unordered list）方式显示。 list separator 文章间的分隔符号。只有在 style 不是 list 时有用。 , class 文章列表的 class 名称。 post amount 要显示的文章数量（0 = 无限制） 6 transform 改变文章名称显示方法的函数 &nbsp; tagcloud插入标签云。1&lt;%- tagcloud([tags], [options]) %&gt; 参数 描述 默认值 min_font 最小字体尺寸 10 max_font 最大字体尺寸 20 unit 字体尺寸的单位 px amount 标签总量 40 orderby 标签排列方式 name order 标签排列顺序。1, sac 升序；-1, desc 降序 1 color 使用颜色 false start_color 开始的颜色。您可使用十六进位值（#b700ff），rgba（rgba(183, 0, 255, 1)），hsla（hsla(283, 100%, 50%, 1)）或 颜色关键字。此变量仅在 color 参数开启时才有用。 &nbsp; end_color 结束的颜色。您可使用十六进位值（#b700ff），rgba（rgba(183, 0, 255, 1)），hsla（hsla(283, 100%, 50%, 1)）或 颜色关键字。此变量仅在 color 参数开启时才有用。 &nbsp; 其他paginator插入分页链接。1&lt;%- paginator(options) %&gt; 参数 描述 默认值 base 基础网址 / format 网址格式 page/%d/ total 分页总数 1 current 目前页数 0 prev_text 上一页链接的文字。仅在 prev_next 设定开启时才有用。 Prev next_text 下一页链接的文字。仅在 prev_next 设定开启时才有用。 Next space 空白文字 … prev_next 显示上一页和下一页的链接 true end_size 显示于两侧的页数 1 mid_size 显示于中间的页数 2 show_all 显示所有页数。如果开启此参数的话，end_size 和 mid_size 就没用了。 false search_form插入 Google 搜索框。1&lt;%- search_form(options) %&gt; 参数 描述 默认值 class 表单的 class name search-form text 搜索提示文字 Search button 显示搜索按钮。此参数可为布尔值（boolean）或字符串，当设定是字符串的时候，即为搜索按钮的文字。 false number_format格式化数字。1&lt;%- number_format(number, [options]) %&gt; 参数 描述 默认值 precision 数字精度。此选项可为 false 或非负整数。 false delimiter 千位数分隔符号 , separator 整数和小数之间的分隔符号 . 示例：12345678910&lt;%- number_format(12345.67, &#123;precision: 1&#125;) %&gt;// 12,345.68&lt;%- number_format(12345.67, &#123;precision: 4&#125;) %&gt;// 12,345.6700&lt;%- number_format(12345.67, &#123;precision: 0&#125;) %&gt;// 12,345&lt;%- number_format(12345.67, &#123;delimiter: ''&#125;) %&gt;// 12345.67&lt;%- number_format(12345.67, &#123;separator: '/'&#125;) %&gt;// 12,345/67 open_graph插入 open graph 资源。1&lt;%- open_graph([options]) %&gt; 参数 描述 默认值 title 页面标题 (og:title) page.title type 页面类型 (og:type) blog url 页面网址 (og:url) url image 页面图片 (og:image) 内容中的图片 site_name 网站名称 (og:site_name) config.title description 页面描述 (og:desription) 内容摘要或前 200 字 twitter_card Twitter 卡片类型 (twitter:card) summary twitter_id Twitter ID (twitter:creator) twitter_site Twitter 网站 (twitter:site) google_plus Google+ 个人资料链接 fb_admins Facebook 管理者 ID fb_app_id Facebook 应用程序 ID &nbsp; toc解析内容中的标题标签 (h1~h6) 并插入目录。1&lt;%- toc(str, [options]) %&gt; 参数 描述 默认值 class Class 名称 toc list_number 显示编号 true 示例：1&lt;%- toc(page.content) %&gt; 参考 Hexo官方文档]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[使用Hexo在GitHub上建立个人博客站点]]></title>
      <url>%2F2017%2F02%2F28%2F%E4%BD%BF%E7%94%A8Hexo%E5%9C%A8GitHub%E4%B8%8A%E5%BB%BA%E7%AB%8B%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%AB%99%E7%82%B9%2F</url>
      <content type="text"><![CDATA[在Github上创建博客项目在github上创建一个博客项目，项目名称必须为{username}.github.io。其中的{username}就是注册github时的用户名。当博客文章推送到这个项目时，访问{username}.github.io，就可以看到自己的博客了。 在本地创建博客项目 安装hexohexo是一个nodejs包，所以安装hexo之前必须安装nodejs。nodejs的安装可以参考nodejs的官方网站下面是hexo的安装步骤 12$ npm install -g hexo # 安装hexo$ npm install -g hexo-cli # 安装hexo命令行工具 创建一个目录作为博客文件夹 1$ mkdir blog 使用hexo初始化这个目录 1$ hexo init blog 进入该目录，安装一些必要的组件 123$ npm install hexo-renderer-jade --save$ npm install hexo-renderer-sass --save$ npm install hexo-deployer-git --save 选择主题在github上选择一款自己喜欢的主题，拉取到本地的themes目录， 然后修改_config.yml文件，修改themes的值为该主题。 运行hexo g &amp;&amp; hexo s，验证博客是否正常。在浏览器里打开http://127.0.0.1:4000，如果能够看到hello world的博客，就是说明一切正常，接下来就可以自己去写博客了。 部署至github打开_config.yml文件，编辑deploy选项，如下所示：1234deploy: type: git repository: &lt;repository_url&gt; branch: master 然后运行hexo deploy，就可以将该博客部署至github了。 关于Hexo的具体使用可以参考 Hexo一些常见的使用方法 。]]></content>
    </entry>

    
  
  
</search>
